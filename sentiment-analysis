from flask import Flask, jsonify, request
import pandas as pd
from bs4 import BeautifulSoup
import requests
from transformers import pipeline
import sys

app = Flask(__name__)

# Load the sentiment analysis model (only once when the app starts)
sentiment_pipeline = pipeline("sentiment-analysis")

def sentiment_analysis(name):
    url = "https://www.mse.mk"
    for page in range(1, 3):
        r = requests.get(url + "/mk/news/latest/" + str(page))
        soup = BeautifulSoup(r.text, "html.parser")
        links_section = soup.find("div", {"id": "news-content"})

        if not links_section:
            print(f"No news content found on page {page}.")
            continue

        links = links_section.find_all("a")
        i = 0
        labels = []
        for link in links:
            if i % 2 == 0:  # Adjust this logic if necessary
                try:
                    r = requests.get(url + link['href'])
                    soup = BeautifulSoup(r.text, "html.parser")
                    test = ""

                    content_section = soup.find("div", {"id": "content"})
                    if not content_section:
                        continue

                    for tag in content_section.find_all("p"):
                        test += tag.text + "\n"

                    if name in test:
                        sentiment_result = sentiment_pipeline(test)
                        labels.append(sentiment_result)
                except Exception as e:
                    print(f"Error processing link {link['href']}: {e}")
            i += 1
        if len(labels) > 0:
            return labels
        else:
            return "NOT FOUND"

@app.route('/sentiment-analysis', methods=['POST'])
def analyze_sentiment():
    try:
        # Get JSON data from the POST request
        data = request.get_json()
        code = data.get('code')  # Get the 'code' argument

        # Load the CSV and get the corresponding name for the code
        df = pd.read_csv("NameScrape.csv", encoding="utf-8")
        result = df.loc[df['code'] == code]['name'].iloc[0]

        # Perform sentiment analysis with the name
        sentiment_res = sentiment_analysis(result)

        # Prepare response data
        pos = 0
        neg = 0
        if sentiment_res == "NOT FOUND":
            return jsonify({"message": "NOT FOUND"}), 404
        else:
            for res in sentiment_res:
                if res[0]['label'] == "NEGATIVE":
                    neg += 1
                else:
                    pos += 1

            result = "SELL" if neg > pos else "BUY"
            return jsonify({"result": result}), 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)
